type PermitRequest = record {
  owner : text;
  spender : text;
  value : text;
  nonce : text;
  deadline : text;
  v : text;
  r : text;
  s : text;
  signature : text;
};

type GaslessApprovalRequest = record {
  permit_request : PermitRequest;
  user_address : text;
  amount : text;
};

// Atomic Swap Types
type SwapOrderStatus = variant {
  Created;
  SourceHTLCCreated;
  DestinationHTLCCreated;
  SourceHTLCClaimed;
  DestinationHTLCClaimed;
  Completed;
  Expired;
  Cancelled;
};

type AtomicSwapOrder = record {
  order_id : text;
  maker : text;
  taker : text;
  source_token : text;
  destination_token : text;
  source_amount : text;
  destination_amount : text;
  secret : text;
  hashlock : text;
  timelock : nat64;
  source_htlc_id : opt text;
  destination_htlc_id : opt text;
  status : SwapOrderStatus;
  created_at : nat64;
  expires_at : nat64;
};

service : {
  // JSON-RPC Methods
  "get_sepolia_block_number" : () -> (variant { Ok : text; Err : text });
  "get_transaction_receipt" : (text) -> (variant { Ok : text; Err : text });
  "get_balance" : (text) -> (variant { Ok : text; Err : text });
  
  // Contract Interaction Methods
  "get_icp_network_signer" : () -> (variant { Ok : text; Err : text });
  "get_claim_fee" : () -> (variant { Ok : text; Err : text });
  "get_refund_fee" : () -> (variant { Ok : text; Err : text });
  "get_total_fees" : () -> (variant { Ok : text; Err : text });
  
  // Testing Methods
  "test_all_contract_functions" : () -> (variant { Ok : text; Err : text });
  "test_basic_rpc" : () -> (variant { Ok : text; Err : text });
  "test_deployment_transaction" : () -> (variant { Ok : text; Err : text });
  
  // Utility Methods
  "get_contract_info" : () -> (text);
  
  // EVM Integration Methods (new)
  "get_public_key" : () -> (variant { Ok : text; Err : text });
  "get_ethereum_address" : () -> (variant { Ok : text; Err : text });
  "sign_transaction" : (text, text, text, text) -> (variant { Ok : text; Err : text });
  "send_raw_transaction" : (text) -> (variant { Ok : text; Err : text });
  
  // Gasless Approval Method
  "execute_gasless_approval" : (GaslessApprovalRequest) -> (variant { Ok : text; Err : text });
  
  // Atomic Swap Methods
  "create_atomic_swap_order" : (text, text, text, text, text, text, nat64) -> (variant { Ok : text; Err : text });
  "create_evm_htlc" : (text, bool) -> (variant { Ok : text; Err : text });
  "claim_evm_htlc" : (text, text) -> (variant { Ok : text; Err : text });
  "execute_atomic_swap" : (text) -> (variant { Ok : text; Err : text });
  "get_atomic_swap_order" : (text) -> (opt AtomicSwapOrder);
  "get_all_atomic_swap_orders" : () -> (vec AtomicSwapOrder);
}
