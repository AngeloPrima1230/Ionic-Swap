use candid::{CandidType, Deserialize, Principal, candid_method};

use ic_cdk_macros::*;
use serde_json::{json, Value};
use ic_http_certification::{
    DefaultCelBuilder, DefaultResponseCertification, HttpCertification, HttpRequest, HttpResponse,
    HttpCertificationTree, HttpCertificationTreeEntry, HttpCertificationPath,
    CERTIFICATE_EXPRESSION_HEADER_NAME,
};
use ic_cdk::api::management_canister::ecdsa::EcdsaKeyId;
use sha3::Digest;

use std::collections::HashMap;
use std::str::FromStr;
use primitive_types::U256;

// Custom random number generator for IC
use getrandom::register_custom_getrandom;

fn custom_getrandom(buf: &mut [u8]) -> Result<(), getrandom::Error> {
    // Use IC's time and caller as entropy source
    let time = ic_cdk::api::time();
    let caller = ic_cdk::api::caller();
    
    for (i, byte) in buf.iter_mut().enumerate() {
        let time_byte = ((time >> (i % 8 * 8)) & 0xFF) as u8;
        let caller_byte = caller.as_slice()[i % caller.as_slice().len()];
        *byte = time_byte ^ caller_byte;
    }
    Ok(())
}

register_custom_getrandom!(custom_getrandom);

use ethers_core::types::Eip1559TransactionRequest;
use ethers_core::types::transaction::eip2930::AccessList;
use ethabi::{Function, Token, ParamType, Address};
use ethers_core::types::U256 as EthU256;

fn keccak256(data: &[u8]) -> [u8; 32] {
    let mut hasher = sha3::Keccak256::new();
    hasher.update(data);
    hasher.finalize().into()
}


// ============================================================================
// CONSTANTS
// ============================================================================

const SEPOLIA_CHAIN_ID: u64 = 11155111;
const EIP1559_TX_ID: u8 = 2;

// Factory Contract (legacy - keeping for compatibility - old deployment)
const FACTORY_ADDRESS: &str = "0x288AA4c267408adE0e01463fBD5DECC824e96E8D";

// HTLC Contract (newly deployed)
const HTLC_CONTRACT_ADDRESS: &str = "0x294b513c6b14d9BAA8F03703ADEf50f8dBf93913";
const SPIRAL_TOKEN_ADDRESS: &str = "0xdE7409EDeA573D090c3C6123458D6242E26b425E";
const STARDUST_TOKEN_ADDRESS: &str = "0x6ca99fc9bDed10004FE9CC6ce40914b98490Dc90";

const ICP_SIGNER_ADDRESS: &str = "0x6a3Ff928a09D21d82B27e9B002BBAea7fc123A00";
const INFURA_URL: &str = "https://sepolia.infura.io/v3/70b7e4d32357459a9af10d6503eae303";

// Function selectors for HTLC contract
const CREATE_HTLC_ERC20_SELECTOR: &str = "0x0c89e296";
const CLAIM_HTLC_SELECTOR: &str = "0xfa971dd7";
const REFUND_HTLC_SELECTOR: &str = "0x95ccea67";
const GET_HTLC_SELECTOR: &str = "0x7a22cf61";

// Legacy function selectors (keeping for reference)
const ICP_NETWORK_SIGNER_SELECTOR: &str = "0x2a92b710";
const CLAIM_FEE_SELECTOR: &str = "0x99d32fc4";
const REFUND_FEE_SELECTOR: &str = "0x90fe6ddb";
const TOTAL_FEES_SELECTOR: &str = "0x60c6d8ae";

static mut HTTP_CERTIFICATION_TREE: Option<HttpCertificationTree> = None;

// ============================================================================
// HTLC AND CROSS-CHAIN SWAP CONSTANTS
// ============================================================================

// HTLC Status
#[derive(CandidType, Deserialize, Clone, Debug, PartialEq)]
pub enum HTLCStatus {
    Created,
    Deposited,
    Claimed,
    Refunded,
    Expired,
}

// Swap Direction
#[derive(CandidType, Deserialize, Clone, Debug)]
pub enum SwapDirection {
    ICPtoEVM,  // ICP -> EVM
    EVMtoICP,  // EVM -> ICP
}

// HTLC Structure (matching EVM contract)
#[derive(CandidType, Deserialize, Clone, Debug)]
pub struct HTLC {
    pub id: String,                 // HTLC ID (bytes32)
    pub sender: String,             // Sender's address
    pub recipient: String,          // Recipient's address
    pub amount: String,             // Amount to swap
    pub hashlock: String,           // Hash of the secret (bytes32)
    pub secret: Option<String>,     // The actual secret (only after reveal)
    pub timelock: u64,              // Expiration timestamp
    pub status: HTLCStatus,         // 0=Locked, 1=Claimed, 2=Refunded
    pub token: String,              // Token address (0x0 for ETH)
    pub source_chain: u64,          // Source chain ID
    pub target_chain: u64,          // Target chain ID
    pub is_cross_chain: bool,       // Whether this is part of a cross-chain swap
    pub order_hash: String,         // Order hash for tracking
    pub created_at: u64,            // Creation timestamp
}

// Atomic Swap Order (for cross-chain coordination)
#[derive(CandidType, Deserialize, Clone, Debug)]
pub struct AtomicSwapOrder {
    pub order_id: String,
    pub maker: String,              // Maker's address
    pub taker: String,              // Taker's address
    pub source_token: String,       // Source token address
    pub destination_token: String,  // Destination token address
    pub source_amount: String,      // Source amount
    pub destination_amount: String, // Destination amount
    pub secret: String,             // Secret for HTLC (generated by ICP)
    pub hashlock: String,           // Hash of the secret
    pub timelock: u64,              // Expiration timestamp
    pub source_htlc_id: Option<String>, // HTLC ID on source chain
    pub destination_htlc_id: Option<String>, // HTLC ID on destination chain
    pub status: SwapOrderStatus,
    pub created_at: u64,
    pub expires_at: u64,
}

// Swap Order Status
#[derive(CandidType, Deserialize, Clone, Debug, PartialEq)]
pub enum SwapOrderStatus {
    Created,
    SourceHTLCCreated,
    DestinationHTLCCreated,
    SourceHTLCClaimed,
    DestinationHTLCClaimed,
    Completed,
    Expired,
    Cancelled,
}

// Cross-chain Swap Order (legacy - keeping for reference)
#[derive(CandidType, Deserialize, Clone, Debug)]
pub struct CrossChainSwapOrder {
    pub order_id: String,
    pub maker: String,
    pub taker: String,
    pub source_asset: String,
    pub destination_asset: String,
    pub source_amount: String,
    pub destination_amount: String,
    pub source_chain_id: u64,
    pub destination_chain_id: u64,
    pub hashlock: String,
    pub secret: Option<String>,
    pub status: HTLCStatus,
    pub created_at: u64,
    pub expiration_time: u64,
    pub direction: SwapDirection,
}

// ============================================================================
// STORAGE FOR HTLC AND SWAPS
// ============================================================================

static mut HTLC_STORE: Option<HashMap<String, HTLC>> = None;
static mut SWAP_ORDERS: Option<HashMap<String, CrossChainSwapOrder>> = None;
static mut ATOMIC_SWAP_ORDERS: Option<HashMap<String, AtomicSwapOrder>> = None;
static mut ORDER_COUNTER: u64 = 0;

// ============================================================================
// NONCE MANAGEMENT FOR EVM TRANSACTIONS
// ============================================================================

static mut CURRENT_NONCE: u64 = 0;
static mut NONCE_LOCK: bool = false;

// Thread-safe nonce management to prevent racing conditions
fn get_next_nonce() -> u64 {
    unsafe {
        if NONCE_LOCK {
            // If locked, wait a bit and try again
            // In a real implementation, you might want to use a more sophisticated locking mechanism
            ic_cdk::api::time(); // Small delay
        }
        NONCE_LOCK = true;
        let nonce = CURRENT_NONCE;
        CURRENT_NONCE += 1;
        NONCE_LOCK = false;
        nonce
    }
}

fn update_current_nonce(new_nonce: u64) {
    unsafe {
        NONCE_LOCK = true;
        CURRENT_NONCE = new_nonce;
        NONCE_LOCK = false;
    }
}

fn get_htlc_store() -> &'static mut HashMap<String, HTLC> {
    unsafe {
        if let Some(store) = &mut HTLC_STORE {
            store
        } else {
            HTLC_STORE = Some(HashMap::new());
            HTLC_STORE.as_mut().unwrap()
        }
    }
}

fn get_swap_orders() -> &'static mut HashMap<String, CrossChainSwapOrder> {
    unsafe {
        if let Some(orders) = &mut SWAP_ORDERS {
            orders
        } else {
            SWAP_ORDERS = Some(HashMap::new());
            SWAP_ORDERS.as_mut().unwrap()
        }
    }
}

fn get_atomic_swap_orders() -> &'static mut HashMap<String, AtomicSwapOrder> {
    unsafe {
        if let Some(orders) = &mut ATOMIC_SWAP_ORDERS {
            orders
        } else {
            ATOMIC_SWAP_ORDERS = Some(HashMap::new());
            ATOMIC_SWAP_ORDERS.as_mut().unwrap()
        }
    }
}

fn generate_order_id() -> String {
    unsafe {
        ORDER_COUNTER += 1;
        format!("order_{}", ORDER_COUNTER)
    }
}

// ============================================================================
// HTTP HELPER FUNCTIONS
// ============================================================================

fn get_http_certification_tree() -> &'static mut HttpCertificationTree {
    unsafe {
        let ptr = &raw mut HTTP_CERTIFICATION_TREE;
        if let Some(tree) = &mut *ptr {
            tree
        } else {
            HTTP_CERTIFICATION_TREE = Some(HttpCertificationTree::default());
            (&mut *ptr).as_mut().unwrap()
        }
    }
}

async fn make_http_request(request: HttpRequest<'_>) -> Result<HttpResponse<'static>, String> {
    let cycles = 230_949_972_000u64;
    
    // Create CEL expression for response-only certification
    let cel_expr = DefaultCelBuilder::response_only_certification()
        .with_response_certification(DefaultResponseCertification::certified_response_headers(vec![
            "Content-Type",
            "Content-Length",
        ]))
        .build();

    // Create the HTTP request argument using the builder pattern
    let request_args = ic_cdk::api::management_canister::http_request::CanisterHttpRequestArgument {
        url: request.url().to_string(),
        max_response_bytes: None,
        headers: request.headers().iter().map(|h| ic_cdk::api::management_canister::http_request::HttpHeader { name: h.0.clone(), value: h.1.clone() }).collect(),
        body: Some(request.body().to_vec()),
        method: match request.method().as_str() {
            "GET" => ic_cdk::api::management_canister::http_request::HttpMethod::GET,
            "POST" => ic_cdk::api::management_canister::http_request::HttpMethod::POST,
            "HEAD" => ic_cdk::api::management_canister::http_request::HttpMethod::HEAD,
            _ => ic_cdk::api::management_canister::http_request::HttpMethod::GET,
        },
        transform: None,
    };

    // Make the HTTP request
    let result: Result<(ic_cdk::api::management_canister::http_request::HttpResponse,), _> = 
        ic_cdk::api::call::call_with_payment(
            Principal::management_canister(),
            "http_request",
            (request_args,),
            cycles,
        )
        .await;
    
    match result {
        Ok((response,)) => {
            // Convert to our HttpResponse type
            let mut headers = response.headers.iter().map(|h| (h.name.clone(), h.value.clone())).collect::<Vec<_>>();
            headers.push((CERTIFICATE_EXPRESSION_HEADER_NAME.to_string(), cel_expr.to_string()));
            
            let http_response = HttpResponse::ok(
                response.body,
                headers,
            ).build();
            
            // Add certification to the response
            let certification = HttpCertification::response_only(&cel_expr, &http_response, None)
                .map_err(|e| format!("Failed to create certification: {:?}", e))?;
            
            // Add the certification to the tree
            let path = HttpCertificationPath::exact("/json-rpc");
            let entry = HttpCertificationTreeEntry::new(&path, &certification);
            get_http_certification_tree().insert(&entry);
            
            Ok(http_response)
        },
        Err(err) => Err(format!("HTTP request failed: {:?}", err)),
    }
}

async fn make_json_rpc_call(method: &str, params: &str) -> Result<String, String> {
    let json_request = json!({
        "jsonrpc": "2.0",
        "method": method,
        "params": serde_json::from_str::<Value>(params).unwrap(),
        "id": 1
    });
    
    let request = HttpRequest::post(INFURA_URL)
        .with_headers(vec![
            ("Content-Type".to_string(), "application/json".to_string()),
            ("User-Agent".to_string(), "ionic-swap-backend".to_string()),
        ])
        .with_body(json_request.to_string().into_bytes())
        .build();
    
    let response = make_http_request(request).await?;
    
    String::from_utf8(response.body().to_vec())
        .map_err(|e| format!("Failed to decode response: {}", e))
}

// ============================================================================
// JSON-RPC METHODS
// ============================================================================

#[update]
async fn get_sepolia_block_number() -> Result<String, String> {
    make_json_rpc_call("eth_blockNumber", "[]").await
}

#[update]
async fn get_transaction_receipt(tx_hash: String) -> Result<String, String> {
    let params = format!("[\"{}\"]", tx_hash);
    make_json_rpc_call("eth_getTransactionReceipt", &params).await
}

#[update]
async fn get_balance(address: String) -> Result<String, String> {
    let params = format!("[\"{}\", \"latest\"]", address);
    make_json_rpc_call("eth_getBalance", &params).await
}

#[update]
async fn get_transaction_count(address: String) -> Result<String, String> {
    let params = format!("[\"{}\", \"latest\"]", address);
    make_json_rpc_call("eth_getTransactionCount", &params).await
}

async fn get_gas_price() -> Result<String, String> {
    make_json_rpc_call("eth_gasPrice", "[]").await
}

async fn get_latest_block() -> Result<String, String> {
    make_json_rpc_call("eth_getBlockByNumber", "[\"latest\", false]").await
}

// ============================================================================
// CONTRACT INTERACTION METHODS
// ============================================================================

#[update]
async fn get_icp_network_signer() -> Result<String, String> {
    let params = format!(
        "[{{\"to\":\"{}\",\"data\":\"{}\"}}, \"latest\"]",
        FACTORY_ADDRESS, ICP_NETWORK_SIGNER_SELECTOR
    );
    make_json_rpc_call("eth_call", &params).await
}

#[update]
async fn get_claim_fee() -> Result<String, String> {
    let params = format!(
        "[{{\"to\":\"{}\",\"data\":\"{}\"}}, \"latest\"]",
        FACTORY_ADDRESS, CLAIM_FEE_SELECTOR
    );
    make_json_rpc_call("eth_call", &params).await
}

#[update]
async fn get_refund_fee() -> Result<String, String> {
    let params = format!(
        "[{{\"to\":\"{}\",\"data\":\"{}\"}}, \"latest\"]",
        FACTORY_ADDRESS, REFUND_FEE_SELECTOR
    );
    make_json_rpc_call("eth_call", &params).await
}

#[update]
async fn get_total_fees() -> Result<String, String> {
    let params = format!(
        "[{{\"to\":\"{}\",\"data\":\"{}\"}}, \"latest\"]",
        FACTORY_ADDRESS, TOTAL_FEES_SELECTOR
    );
    make_json_rpc_call("eth_call", &params).await
}

// ============================================================================
// CORE HTLC FUNCTIONS
// ============================================================================

#[update]
async fn create_htlc_escrow(
    hashlock: String,
    maker: String,
    taker: String,
    amount: String,
    token: String,
    safety_deposit: String,
    expiration_time: u64,
    direction: SwapDirection,
    source_chain_id: u64,
    destination_chain_id: u64,
) -> Result<String, String> {
    let htlc_id = format!("htlc_{}", ic_cdk::api::time());
    
    let htlc = HTLC {
        id: htlc_id.clone(),
        sender: maker,
        recipient: taker,
        amount,
        hashlock,
        secret: None,
        timelock: expiration_time,
        status: HTLCStatus::Created,
        token,
        source_chain: source_chain_id,
        target_chain: destination_chain_id,
        is_cross_chain: true,
        order_hash: htlc_id.clone(),
        created_at: ic_cdk::api::time() / 1_000_000_000, // Convert to seconds
    };
    
    get_htlc_store().insert(htlc_id.clone(), htlc);
    
    Ok(htlc_id)
}

#[update]
async fn deposit_to_htlc(htlc_id: String) -> Result<String, String> {
    let store = get_htlc_store();
    
    if let Some(htlc) = store.get_mut(&htlc_id) {
        if htlc.status != HTLCStatus::Created {
            return Err("HTLC is not in Created state".to_string());
        }
        
        // For ICP side, we would transfer tokens here
        // For EVM side, this would be handled by the contract
        
        htlc.status = HTLCStatus::Deposited;
        Ok("Deposit successful".to_string())
    } else {
        Err("HTLC not found".to_string())
    }
}

#[update]
async fn claim_htlc_funds(htlc_id: String, secret: String) -> Result<String, String> {
    let store = get_htlc_store();
    
    if let Some(htlc) = store.get_mut(&htlc_id) {
        if htlc.status != HTLCStatus::Deposited {
            return Err("HTLC is not in Deposited state".to_string());
        }
        
        // Verify the secret matches the hashlock
        // For now, we'll use a simple hash comparison
        // In a real implementation, we'd use proper cryptographic hashing
        let secret_hash = format!("0x{}", hex::encode(secret.as_bytes()));
        
        if secret_hash != htlc.hashlock {
            return Err("Invalid secret".to_string());
        }
        
        htlc.secret = Some(secret);
        htlc.status = HTLCStatus::Claimed;
        
        // Transfer funds to taker
        // This would be implemented based on the direction (ICP or EVM)
        
        Ok("Claim successful".to_string())
    } else {
        Err("HTLC not found".to_string())
    }
}

#[update]
async fn refund_htlc_funds(htlc_id: String) -> Result<String, String> {
    let store = get_htlc_store();
    
    if let Some(htlc) = store.get_mut(&htlc_id) {
        let current_time = ic_cdk::api::time();
        
        if current_time < htlc.timelock {
            return Err("HTLC has not expired yet".to_string());
        }
        
        if htlc.status == HTLCStatus::Claimed {
            return Err("HTLC has already been claimed".to_string());
        }
        
        htlc.status = HTLCStatus::Refunded;
        
        // Transfer funds back to maker
        // This would be implemented based on the direction (ICP or EVM)
        
        Ok("Refund successful".to_string())
    } else {
        Err("HTLC not found".to_string())
    }
}

// ============================================================================
// CROSS-CHAIN SWAP FUNCTIONS (1inch Fusion+ Style)
// ============================================================================

#[update]
async fn create_cross_chain_swap_order(
    maker: String,
    taker: String,
    source_asset: String,
    destination_asset: String,
    source_amount: String,
    destination_amount: String,
    source_chain_id: u64,
    destination_chain_id: u64,
    expiration_time: u64,
) -> Result<String, String> {
    // Generate a random secret and its hash
    let secret = format!("secret_{}_{}", ic_cdk::api::time(), ic_cdk::api::caller().to_string());
    let secret_hash = format!("0x{}", hex::encode(secret.as_bytes()));
    
    let order_id = generate_order_id();
    let direction = if source_chain_id == 0 { // 0 represents ICP
        SwapDirection::ICPtoEVM
    } else {
        SwapDirection::EVMtoICP
    };
    
    let order = CrossChainSwapOrder {
        order_id: order_id.clone(),
        maker,
        taker,
        source_asset,
        destination_asset,
        source_amount,
        destination_amount,
        source_chain_id,
        destination_chain_id,
        hashlock: secret_hash,
        secret: Some(secret),
        status: HTLCStatus::Created,
        created_at: ic_cdk::api::time(),
        expiration_time,
        direction,
    };
    
    get_swap_orders().insert(order_id.clone(), order);
    
    Ok(order_id)
}

#[update]
async fn execute_cross_chain_swap(order_id: String) -> Result<String, String> {
    let orders = get_swap_orders();
    
    if let Some(order) = orders.get_mut(&order_id) {
        if order.status != HTLCStatus::Created {
            return Err("Order is not in Created state".to_string());
        }
        
        // Phase 1: Create HTLC on source chain
        let source_htlc_id = create_htlc_escrow(
            order.hashlock.clone(),
            order.maker.clone(),
            order.taker.clone(),
            order.source_amount.clone(),
            order.source_asset.clone(),
            "1000000000000000000".to_string(), // 1 ETH safety deposit
            order.expiration_time,
            order.direction.clone(),
            order.source_chain_id,
            order.destination_chain_id,
        ).await?;
        
        // Phase 2: Create HTLC on destination chain
        let dest_htlc_id = create_htlc_escrow(
            order.hashlock.clone(),
            order.taker.clone(),
            order.maker.clone(),
            order.destination_amount.clone(),
            order.destination_asset.clone(),
            "1000000000000000000".to_string(), // 1 ETH safety deposit
            order.expiration_time,
            order.direction.clone(),
            order.destination_chain_id,
            order.source_chain_id,
        ).await?;
        
        // Phase 3: Deposit funds into both HTLCs
        deposit_to_htlc(source_htlc_id.clone()).await?;
        deposit_to_htlc(dest_htlc_id.clone()).await?;
        
        order.status = HTLCStatus::Deposited;
        
        Ok(format!("Swap executed. Source HTLC: {}, Destination HTLC: {}", source_htlc_id, dest_htlc_id))
    } else {
        Err("Order not found".to_string())
    }
}

#[update]
async fn complete_cross_chain_swap(order_id: String) -> Result<String, String> {
    let orders = get_swap_orders();
    
    if let Some(order) = orders.get_mut(&order_id) {
        if order.status != HTLCStatus::Deposited {
            return Err("Order is not in Deposited state".to_string());
        }
        
        if let Some(_secret) = &order.secret {
            // Claim funds from both HTLCs using the secret
            // This would involve calling claim_htlc_funds for both chains
            
            order.status = HTLCStatus::Claimed;
            Ok("Swap completed successfully".to_string())
        } else {
            Err("Secret not available".to_string())
        }
    } else {
        Err("Order not found".to_string())
    }
}

// ============================================================================
// TESTING METHODS
// ============================================================================

#[update]
async fn test_all_contract_functions() -> Result<String, String> {
    let mut result = String::from("=== Sepolia Contract Test Results ===\n");
    
    // Test ICP Network Signer
    match get_icp_network_signer().await {
        Ok(response) => result.push_str(&format!("✅ ICP Network Signer: {}\n", response)),
        Err(error) => result.push_str(&format!("❌ ICP Network Signer: {}\n", error)),
    }
    
    // Test Claim Fee
    match get_claim_fee().await {
        Ok(response) => result.push_str(&format!("✅ Claim Fee: {}\n", response)),
        Err(error) => result.push_str(&format!("❌ Claim Fee: {}\n", error)),
    }
    
    // Test Refund Fee
    match get_refund_fee().await {
        Ok(response) => result.push_str(&format!("✅ Refund Fee: {}\n", response)),
        Err(error) => result.push_str(&format!("❌ Refund Fee: {}\n", error)),
    }
    
    // Test Total Fees
    match get_total_fees().await {
        Ok(response) => result.push_str(&format!("✅ Total Fees: {}\n", response)),
        Err(error) => result.push_str(&format!("❌ Total Fees: {}\n", error)),
    }
    
    Ok(result)
}

#[update]
async fn test_basic_rpc() -> Result<String, String> {
    let mut result = String::from("=== Basic RPC Test Results ===\n");
    
    // Test block number
    match get_sepolia_block_number().await {
        Ok(block_number) => result.push_str(&format!("✅ Latest Block: {}\n", block_number)),
        Err(error) => result.push_str(&format!("❌ Block Number: {}\n", error)),
    }
    
    // Test balance
    match get_balance(ICP_SIGNER_ADDRESS.to_string()).await {
        Ok(balance) => result.push_str(&format!("✅ ICP Signer Balance: {}\n", balance)),
        Err(error) => result.push_str(&format!("❌ Balance: {}\n", error)),
    }
    
    Ok(result)
}

#[update]
async fn test_deployment_transaction() -> Result<String, String> {
    let deployment_tx = "0x632b719a0b30557774ad8e4a7025ccb75497bf38818cd16c9263c03b641c7338";
    
    match get_transaction_receipt(deployment_tx.to_string()).await {
        Ok(receipt) => Ok(format!("✅ Deployment Transaction Receipt:\n{}", receipt)),
        Err(error) => Err(format!("❌ Failed to get deployment receipt: {}", error)),
    }
}

// ============================================================================
// QUERY FUNCTIONS
// ============================================================================

#[query]
fn get_htlc(htlc_id: String) -> Option<HTLC> {
    get_htlc_store().get(&htlc_id).cloned()
}

#[query]
fn get_swap_order(order_id: String) -> Option<CrossChainSwapOrder> {
    get_swap_orders().get(&order_id).cloned()
}

#[query]
fn get_all_htlcs() -> Vec<HTLC> {
    get_htlc_store().values().cloned().collect()
}

#[query]
fn get_all_swap_orders() -> Vec<CrossChainSwapOrder> {
    get_swap_orders().values().cloned().collect()
}

// ============================================================================
// UTILITY METHODS
// ============================================================================

#[query]
fn get_contract_info() -> String {
    format!(
        "Factory Address: {}\nICP Signer: {}\nChain ID: {}",
        FACTORY_ADDRESS, ICP_SIGNER_ADDRESS, SEPOLIA_CHAIN_ID
    )
}

// ============================================================================
// EIP-2771 MINIMAL FORWARDER RELAYER
// ============================================================================



#[derive(CandidType, Deserialize)]
pub struct PermitRequest {
    pub owner: String,
    pub spender: String,
    pub value: String,
    pub nonce: String, // User's nonce that was used in the permit signature
    pub deadline: String,
    pub v: String,
    pub r: String,
    pub s: String,
    pub signature: String,
}

#[derive(CandidType, Deserialize)]
pub struct GaslessApprovalRequest {
    pub permit_request: PermitRequest,
    pub user_address: String,
    pub amount: String,
    pub token_address: String, // Add token address to make it explicit
}

#[update]
#[candid_method(update)]
async fn execute_gasless_approval(request: GaslessApprovalRequest) -> Result<String, String> {
    // 1. Verify the permit signature
    let is_valid = verify_permit_signature(&request.permit_request).await?;
    if !is_valid {
        return Err("Invalid permit signature".to_string());
    }
    
    // 2. Get canister's Ethereum address
    let from_addr_str = get_public_key().await?;
    
    // 3. Get current nonce for the canister using thread-safe nonce management
    let canister_nonce = get_next_nonce();
    let canister_nonce_hex = format!("{:x}", canister_nonce);
    
    // Debug: Log the nonces
    ic_cdk::println!("Debug - User nonce from permit: {}", request.permit_request.nonce);
    ic_cdk::println!("Debug - Canister nonce: {}", canister_nonce_hex);
    
    // 4. Encode the permit function call on the token contract
    let permit_data = encode_permit_call(&request.permit_request)?;
    
    // Debug: Check if the permit_data has odd length
    let data_clean = permit_data.trim_start_matches("0x");
    if data_clean.len() % 2 != 0 {
        return Err(format!("Permit data has odd length: {} chars", data_clean.len()));
    }
    
    // 5. Get current gas price and block info
    let gas_price_response = get_gas_price().await?;
    let gas_price_json: serde_json::Value = serde_json::from_str(&gas_price_response)
        .map_err(|e| format!("Failed to parse gas price response: {}", e))?;
    let base_gas_price = gas_price_json["result"]
        .as_str()
        .ok_or("No result in gas price response")?
        .trim_start_matches("0x");
    
    // 6. Get latest block for base fee
    let block_response = get_latest_block().await?;
    let block_json: serde_json::Value = serde_json::from_str(&block_response)
        .map_err(|e| format!("Failed to parse block response: {}", e))?;
    let base_fee_per_gas = block_json["result"]["baseFeePerGas"]
        .as_str()
        .unwrap_or("0x3b9aca00") // 1 gwei default
        .trim_start_matches("0x");
    
    // 7. Calculate much higher gas price for replacement transactions
    let base_gas_price_u256 = U256::from_str_radix(base_gas_price, 16)
        .map_err(|e| format!("Invalid base gas price: {}", e))?;
    let gas_price_u256 = base_gas_price_u256 * U256::from(5); // 5x the gas price for replacement
    let gas_price = format!("{:x}", gas_price_u256);
    
    // 7. Construct and sign EIP-1559 transaction to the token contract
    // Use the token address from the request
    let token_address = &request.token_address;
    
    // Debug: Check the addresses
    if token_address.len() != 42 || !token_address.starts_with("0x") {
        return Err(format!("Invalid token address: {} (length: {})", token_address, token_address.len()));
    }
    
    // Debug: Print the addresses for verification
    ic_cdk::println!("Debug - From address: {}", from_addr_str);
    ic_cdk::println!("Debug - To address (token): {}", token_address);
    ic_cdk::println!("Debug - Permit value: {}", request.permit_request.value);
    
    let signed_tx = sign_eip1559_transaction(
        &from_addr_str,
        token_address,
        &canister_nonce_hex,
        &gas_price,
        &base_fee_per_gas,
        &permit_data,
    ).await?;
    
    // 8. Send the signed transaction
    let tx_hash = send_raw_transaction(&signed_tx).await?;
    
    Ok(format!(
        "Gasless approval executed successfully! Transaction hash: {}",
        tx_hash
    ))
}

async fn verify_permit_signature(permit_request: &PermitRequest) -> Result<bool, String> {
    // Debug: Log the permit request details
    ic_cdk::println!("Debug - Permit request owner: {}", permit_request.owner);
    ic_cdk::println!("Debug - Permit request spender: {}", permit_request.spender);
    ic_cdk::println!("Debug - Permit request value: {}", permit_request.value);
    ic_cdk::println!("Debug - Permit request deadline: {}", permit_request.deadline);
    ic_cdk::println!("Debug - Permit request v: {}", permit_request.v);
    ic_cdk::println!("Debug - Permit request r: {}", permit_request.r);
    ic_cdk::println!("Debug - Permit request s: {}", permit_request.s);
    
    // For now, we'll implement a simplified verification
    // In production, this should verify the actual EIP-2612 signature
    
    // Check if deadline has passed
    let current_time = ic_cdk::api::time() / 1_000_000_000; // Convert to seconds
    let deadline: u64 = permit_request.deadline.parse()
        .map_err(|e| format!("Invalid deadline: {}", e))?;
    
    if current_time > deadline {
        return Err("Permit deadline has passed".to_string());
    }
    
    // Basic validation of signature components
    let v: u8 = permit_request.v.parse()
        .map_err(|e| format!("Invalid v value: {}", e))?;
    
    if v != 27 && v != 28 {
        return Err("Invalid v value (must be 27 or 28)".to_string());
    }
    
    // Validate r and s are valid hex strings
    if !permit_request.r.starts_with("0x") || permit_request.r.len() != 66 {
        return Err("Invalid r value".to_string());
    }
    
    if !permit_request.s.starts_with("0x") || permit_request.s.len() != 66 {
        return Err("Invalid s value".to_string());
    }
    
    // For now, return true (simplified verification)
    // TODO: Implement full EIP-2612 signature verification
    // 1. Reconstruct the permit message according to EIP-2612
    // 2. Hash it according to EIP-712
    // 3. Recover the signer address from the signature
    // 4. Compare with the owner address
    
    Ok(true)
}

fn encode_permit_call(permit_request: &PermitRequest) -> Result<String, String> {
    // EIP-2612 permit function selector: permit(address,address,uint256,uint256,uint8,bytes32,bytes32)
    let function_selector = "d505accf";
    
    // Encode permit parameters: (owner, spender, value, deadline, v, r, s)
    let owner_padded = format!("{:0>64}", permit_request.owner.trim_start_matches("0x"));
    let spender_padded = format!("{:0>64}", permit_request.spender.trim_start_matches("0x"));
    
    // Convert value to proper hex format (same as ethers.utils.parseUnits)
    let value_decimal: u128 = permit_request.value.parse().map_err(|e| format!("Invalid value: {}", e))?;
    let value_hex = format!("{:x}", value_decimal);
    let value_padded = format!("{:0>64}", value_hex);
    
    // Convert deadline from decimal string to hex and pad to 64 characters
    let deadline_decimal: u64 = permit_request.deadline.parse().map_err(|e| format!("Invalid deadline: {}", e))?;
    let deadline_hex = format!("{:x}", deadline_decimal);
    let deadline_padded = format!("{:0>64}", deadline_hex);
    // Convert v from decimal string to hex and pad to 64 characters
    let v_decimal: u64 = permit_request.v.parse().map_err(|e| format!("Invalid v value: {}", e))?;
    let v_padded = format!("{:0>64}", format!("{:x}", v_decimal));
    let r_padded = format!("{:0>64}", permit_request.r.trim_start_matches("0x"));
    let s_padded = format!("{:0>64}", permit_request.s.trim_start_matches("0x"));
    
    // Debug: Check each component for odd length
    if owner_padded.len() % 2 != 0 || spender_padded.len() % 2 != 0 || 
       value_padded.len() % 2 != 0 || deadline_padded.len() % 2 != 0 ||
       v_padded.len() % 2 != 0 || r_padded.len() % 2 != 0 || s_padded.len() % 2 != 0 {
        return Err(format!(
            "Permit component lengths - owner: {}, spender: {}, value: {}, deadline: {}, v: {}, r: {}, s: {}",
            owner_padded.len(), spender_padded.len(), value_padded.len(), deadline_padded.len(),
            v_padded.len(), r_padded.len(), s_padded.len()
        ));
    }
    
    let encoded_data = format!(
        "0x{}{}{}{}{}{}{}{}",
        function_selector,
        owner_padded,
        spender_padded,
        value_padded,
        deadline_padded,
        v_padded,
        r_padded,
        s_padded
    );
    
    // Debug: Log the encoded permit data
    ic_cdk::println!("Debug - Encoded permit data: {}", encoded_data);
    ic_cdk::println!("Debug - Function selector: {}", function_selector);
    ic_cdk::println!("Debug - Owner padded: {}", owner_padded);
    ic_cdk::println!("Debug - Spender padded: {}", spender_padded);
    ic_cdk::println!("Debug - Value padded: {}", value_padded);
    ic_cdk::println!("Debug - Deadline padded: {}", deadline_padded);
    ic_cdk::println!("Debug - V padded: {}", v_padded);
    ic_cdk::println!("Debug - R padded: {}", r_padded);
    ic_cdk::println!("Debug - S padded: {}", s_padded);
    
    // Debug: Check if the final encoded data has odd length
    let final_clean = encoded_data.trim_start_matches("0x");
    if final_clean.len() % 2 != 0 {
        return Err(format!("Final permit data has odd length: {} chars", final_clean.len()));
    }
    
    Ok(encoded_data)
}

fn encode_htlc_permit_and_transfer_call(permit_request: &PermitRequest) -> Result<String, String> {
    // executePermitAndTransfer function selector: executePermitAndTransfer(address,address,address,uint256,uint256,uint8,bytes32,bytes32)
    // Function signature: executePermitAndTransfer(address,address,address,uint256,uint256,uint8,bytes32,bytes32)
    let function_selector = "executePermitAndTransfer";
    
    // Function selector for executePermitAndTransfer(address,address,address,uint256,uint256,uint8,bytes32,bytes32)
    let function_selector_hash = "2e456695";
    
    // Token address (SpiralToken)
    let token_address = "0xdE7409EDeA573D090c3C6123458D6242E26b425E";
    let token_padded = format!("{:0>64}", token_address.trim_start_matches("0x"));
    
    // Encode permit parameters: (token, owner, spender, value, deadline, v, r, s)
    let owner_padded = format!("{:0>64}", permit_request.owner.trim_start_matches("0x"));
    let spender_padded = format!("{:0>64}", permit_request.spender.trim_start_matches("0x"));
    
    // Convert value to proper hex format
    let value_decimal: u128 = permit_request.value.parse().map_err(|e| format!("Invalid value: {}", e))?;
    let value_hex = format!("{:x}", value_decimal);
    let value_padded = format!("{:0>64}", value_hex);
    
    // Convert deadline from decimal string to hex and pad to 64 characters
    let deadline_decimal: u64 = permit_request.deadline.parse().map_err(|e| format!("Invalid deadline: {}", e))?;
    let deadline_hex = format!("{:x}", deadline_decimal);
    let deadline_padded = format!("{:0>64}", deadline_hex);
    
    // Convert v from decimal string to hex and pad to 64 characters
    let v_decimal: u64 = permit_request.v.parse().map_err(|e| format!("Invalid v value: {}", e))?;
    let v_padded = format!("{:0>64}", format!("{:x}", v_decimal));
    let r_padded = format!("{:0>64}", permit_request.r.trim_start_matches("0x"));
    let s_padded = format!("{:0>64}", permit_request.s.trim_start_matches("0x"));
    
    // Debug: Check each component for odd length
    if token_padded.len() % 2 != 0 || owner_padded.len() % 2 != 0 || spender_padded.len() % 2 != 0 || 
       value_padded.len() % 2 != 0 || deadline_padded.len() % 2 != 0 ||
       v_padded.len() % 2 != 0 || r_padded.len() % 2 != 0 || s_padded.len() % 2 != 0 {
        return Err(format!(
            "HTLC component lengths - token: {}, owner: {}, spender: {}, value: {}, deadline: {}, v: {}, r: {}, s: {}",
            token_padded.len(), owner_padded.len(), spender_padded.len(), value_padded.len(), deadline_padded.len(),
            v_padded.len(), r_padded.len(), s_padded.len()
        ));
    }
    
    let encoded_data = format!(
        "0x{}{}{}{}{}{}{}{}{}",
        function_selector_hash,
        token_padded,
        owner_padded,
        spender_padded,
        value_padded,
        deadline_padded,
        v_padded,
        r_padded,
        s_padded
    );
    
    // Debug: Log the encoded HTLC data
    ic_cdk::println!("Debug - Encoded HTLC data: {}", encoded_data);
    ic_cdk::println!("Debug - Function selector: {}", function_selector);
    ic_cdk::println!("Debug - Token padded: {}", token_padded);
    ic_cdk::println!("Debug - Owner padded: {}", owner_padded);
    ic_cdk::println!("Debug - Spender padded: {}", spender_padded);
    ic_cdk::println!("Debug - Value padded: {}", value_padded);
    ic_cdk::println!("Debug - Deadline padded: {}", deadline_padded);
    ic_cdk::println!("Debug - V padded: {}", v_padded);
    ic_cdk::println!("Debug - R padded: {}", r_padded);
    ic_cdk::println!("Debug - S padded: {}", s_padded);
    
    // Debug: Check if the final encoded data has odd length
    let final_clean = encoded_data.trim_start_matches("0x");
    if final_clean.len() % 2 != 0 {
        return Err(format!("Final HTLC data has odd length: {} chars", final_clean.len()));
    }
    
    Ok(encoded_data)
}



// ============================================================================
// PERMIT SUBMISSION AND EXECUTION (LEGACY - KEEPING FOR REFERENCE)
// ============================================================================

#[derive(CandidType, Deserialize)]
pub struct PermitData {
    pub token_address: String,
    pub owner: String,
    pub spender: String,
    pub value: String,
    pub deadline: u64,
    pub v: u8,
    pub r: String,
    pub s: String,
    pub signature: String,
}

#[update]
async fn submit_permit_signature(permit_data: PermitData) -> Result<String, String> {
    // 1. Verify permit signature
    let recovered_address = verify_permit_signature_legacy(&permit_data)?;
    if recovered_address != permit_data.owner {
        return Err("Invalid permit signature".to_string());
    }
    
    // 2. Get canister's Ethereum address
    let from_addr_str = get_public_key().await?;
    
    // 3. Get current nonce
    let nonce_response = get_transaction_count(from_addr_str.clone()).await?;
    let nonce_json: serde_json::Value = serde_json::from_str(&nonce_response)
        .map_err(|e| format!("Failed to parse nonce response: {}", e))?;
    let nonce = nonce_json["result"]
        .as_str()
        .ok_or("No result in nonce response")?
        .trim_start_matches("0x");
    
    // 4. Encode the permit function call
    let permit_call_data = encode_htlc_permit_call(&permit_data)?;
    
    // For now, just return success with the transaction details
    // The actual transaction signing and sending requires proper EIP-1559 transaction construction
    Ok(format!(
        "Permit signature validated successfully. Canister address: {}, Nonce: {}, Permit call data length: {} bytes",
        from_addr_str,
        nonce,
        permit_call_data.len() / 2 - 1
    ))
}



fn verify_permit_signature_legacy(permit_data: &PermitData) -> Result<String, String> {
    // TODO: Implement proper EIP-2612 signature verification
    // For now, we'll return the owner address (simplified)
    // In production, this should verify the actual signature using web3-rs
    
    // The verification should:
    // 1. Reconstruct the permit message
    // 2. Hash it according to EIP-2612
    // 3. Recover the signer address from the signature
    // 4. Compare with the owner address
    
    Ok(permit_data.owner.clone())
}

fn encode_htlc_permit_call(permit_data: &PermitData) -> Result<String, String> {
    // EIP-2612 permit function selector: permit(address,address,uint256,uint256,uint8,bytes32,bytes32)
    let function_selector = "0xd505accf";
    
    // Encode permit parameters: (owner, spender, value, deadline, v, r, s)
    let encoded_data = format!(
        "0x{}{}{}{}{}{}{}{}",
        function_selector,
        // owner (address) - pad to 32 bytes
        format!("{:0>64}", permit_data.owner.trim_start_matches("0x")),
        // spender (address) - pad to 32 bytes  
        format!("{:0>64}", permit_data.spender.trim_start_matches("0x")),
        // value (uint256) - pad to 32 bytes
        format!("{:0>64}", permit_data.value.trim_start_matches("0x")),
        // deadline (uint256) - pad to 32 bytes
        format!("{:0>64}", format!("{:x}", permit_data.deadline)),
        // v (uint8) - pad to 32 bytes
        format!("{:0>64}", format!("{:x}", permit_data.v)),
        // r (bytes32)
        permit_data.r.trim_start_matches("0x"),
        // s (bytes32)
        permit_data.s.trim_start_matches("0x")
    );
    
    Ok(encoded_data)
}

// ============================================================================
// EVM HTLC CONTRACT INTERACTION METHODS
// ============================================================================

// Removed old create_evm_htlc_escrow function - now using ic-evm-utils

// Removed old claim_evm_htlc_funds and cancel_evm_htlc_escrow functions - now using ic-evm-utils

// ============================================================================
// EVM INTEGRATION METHODS (USING IC CDK APIs)
// ============================================================================

#[update]
async fn get_public_key() -> Result<String, String> {
    // Get the Ethereum address using ic-cdk ECDSA
    let key_id = ic_cdk::api::management_canister::ecdsa::EcdsaKeyId {
        curve: ic_cdk::api::management_canister::ecdsa::EcdsaCurve::Secp256k1,
        name: "dfx_test_key".to_string(),
    };
    
    let derivation_path = vec![ic_cdk::id().as_slice().to_vec()];
    
    let public_key_arg = ic_cdk::api::management_canister::ecdsa::EcdsaPublicKeyArgument {
        canister_id: None,
        derivation_path,
        key_id,
    };
    
    let public_key = ic_cdk::api::management_canister::ecdsa::ecdsa_public_key(public_key_arg)
        .await
        .map_err(|e| format!("Failed to get public key: {:?}", e))?;
    
    // Use the proper method to convert public key bytes to Ethereum address
    let public_key_bytes = public_key.0.public_key;
    
    // Convert to Ethereum address using the proper method from the documentation
    let address = pubkey_bytes_to_address(&public_key_bytes);
    
    Ok(address)
}

// Helper function to convert public key bytes to Ethereum address
fn pubkey_bytes_to_address(pubkey_bytes: &[u8]) -> String {
    use ethers_core::k256::elliptic_curve::sec1::ToEncodedPoint;
    use ethers_core::k256::PublicKey;
    use ethers_core::types::Address;

    let key = PublicKey::from_sec1_bytes(pubkey_bytes)
        .expect("failed to parse the public key as SEC1");
    let point = key.to_encoded_point(false);
    // we re-encode the key to the decompressed representation.
    let point_bytes = point.as_bytes();
    assert_eq!(point_bytes[0], 0x04);

    let hash = keccak256(&point_bytes[1..]);

    ethers_core::utils::to_checksum(&Address::from_slice(&hash[12..32]), None)
}

#[update]
async fn get_ethereum_address() -> Result<String, String> {
    get_public_key().await
}

#[update]
async fn test_signing_address() -> Result<String, String> {
    get_public_key().await
}

#[update]
async fn test_simple_transaction() -> Result<String, String> {
    // Test a simple transaction using direct HTTP calls
    let from_addr_str = get_public_key().await?;
    
    // Get current nonce
    let nonce_response = get_transaction_count(from_addr_str.clone()).await?;
    let nonce_json: serde_json::Value = serde_json::from_str(&nonce_response)
        .map_err(|e| format!("Failed to parse nonce response: {}", e))?;
    let nonce = nonce_json["result"]
        .as_str()
        .ok_or("No result in nonce response")?
        .trim_start_matches("0x");
    
    // For now, just test that we can get the nonce and address correctly
    // The actual transaction signing requires proper EIP-1559 transaction construction
    Ok(format!("Canister address: {}, Nonce: {}", from_addr_str, nonce))
}

async fn sign_eip1559_transaction(
    from: &str,
    to: &str,
    nonce: &str,
    _gas_price: &str,
    base_fee_per_gas: &str,
    data: &str,
) -> Result<String, String> {
    const EIP1559_TX_ID: u8 = 2;
    
    // Convert hex strings to U256
    let nonce_u256 = U256::from_str_radix(nonce, 16)
        .map_err(|e| format!("Invalid nonce: {}", e))?;
    let base_fee_u256 = U256::from_str_radix(base_fee_per_gas, 16)
        .map_err(|e| format!("Invalid base fee: {}", e))?;
    
    // Calculate max fee per gas and max priority fee per gas
    let max_priority_fee_per_gas = U256::from(1500000000u64); // 1.5 gwei
    let max_fee_per_gas = base_fee_u256 * U256::from(2u64) + max_priority_fee_per_gas;
    
    // Gas limit for the transaction
    let gas_limit = U256::from(5000000u64); // 500k gas limit (increased for HTLC creation)
    
    // Parse addresses
    ic_cdk::println!("Debug - Parsing to address: {}", to);
    let to_address = ethers_core::types::Address::from_str(to)
        .map_err(|e| format!("Invalid to address: {}", e))?;
    ic_cdk::println!("Debug - Parsed to address: {:?}", to_address);
    ic_cdk::println!("Debug - To address bytes: {:?}", to_address.as_bytes());
    
    let from_address = ethers_core::types::Address::from_str(from)
        .map_err(|e| format!("Invalid from address: {}", e))?;
    
    // Parse data - data is already hex-encoded, so we decode it to bytes
    let data_bytes = hex::decode(data.trim_start_matches("0x"))
        .map_err(|e| format!("Invalid data: {}", e))?;
    
    // Create EIP-1559 transaction
    let tx = Eip1559TransactionRequest {
        from: Some(from_address),
        chain_id: Some(ethers_core::types::U64::from(11155111u64)), // Sepolia chain ID
        nonce: Some(nonce_u256),
        max_priority_fee_per_gas: Some(max_priority_fee_per_gas),
        max_fee_per_gas: Some(max_fee_per_gas),
        gas: Some(gas_limit),
        to: Some(ethers_core::types::NameOrAddress::Address(to_address)),
        value: Some(U256::from(0u64)),
        data: Some(ethers_core::types::Bytes::from(data_bytes)),
        access_list: AccessList::default(),
    };
    
    // Get the canister's public key for signature recovery
    let key_id = ic_cdk::api::management_canister::ecdsa::EcdsaKeyId {
        curve: ic_cdk::api::management_canister::ecdsa::EcdsaCurve::Secp256k1,
        name: "dfx_test_key".to_string(),
    };
    
    let derivation_path = vec![ic_cdk::id().as_slice().to_vec()];
    let ecdsa_pub_key = get_canister_public_key(key_id.clone(), None, derivation_path.clone()).await;
    
    // Use the built-in RLP encoding method
    let mut unsigned_tx_bytes = tx.rlp().to_vec();
    unsigned_tx_bytes.insert(0, EIP1559_TX_ID);
    
    let txhash = keccak256(&unsigned_tx_bytes);
    
    // Sign the transaction hash
    let sign_args = ic_cdk::api::management_canister::ecdsa::SignWithEcdsaArgument {
        message_hash: txhash.to_vec(),
        derivation_path,
        key_id,
    };
    
    let signature = ic_cdk::api::management_canister::ecdsa::sign_with_ecdsa(sign_args)
        .await
        .map_err(|e| format!("Failed to sign transaction: {:?}", e))?;
    
    // Parse signature components
    let sig_bytes = signature.0.signature;
    if sig_bytes.len() != 64 {
        return Err("Invalid signature length".to_string());
    }
    
    let r = U256::from_big_endian(&sig_bytes[..32]);
    let s = U256::from_big_endian(&sig_bytes[32..]);
    
    // Calculate v (recovery bit) using y_parity function
    let v = y_parity(&txhash, &sig_bytes, &ecdsa_pub_key);
    
    // Create signature struct
    let signature_struct = ethers_core::types::Signature {
        v,
        r,
        s,
    };
    
    // Use the built-in RLP encoding method for signed transaction
    let mut signed_tx_bytes = tx.rlp_signed(&signature_struct).to_vec();
    signed_tx_bytes.insert(0, EIP1559_TX_ID);
    
    let signed_tx_hex = format!("0x{}", hex::encode(signed_tx_bytes));
    
    Ok(signed_tx_hex)
}

async fn send_raw_transaction(signed_tx: &str) -> Result<String, String> {
    let params = format!("[\"{}\"]", signed_tx);
    let response = make_json_rpc_call("eth_sendRawTransaction", &params).await?;
    
    let response_json: serde_json::Value = serde_json::from_str(&response)
        .map_err(|e| format!("Failed to parse response: {}", e))?;
    
    if let Some(error) = response_json.get("error") {
        return Err(format!("Transaction failed: {}", error));
    }
    
    let tx_hash = response_json["result"]
        .as_str()
        .ok_or("No transaction hash in response")?;
    
    Ok(tx_hash.to_string())
}

/// Get HTLC ID from transaction receipt by parsing the HTLCCreated event
async fn get_htlc_id_from_receipt(tx_hash: &str) -> Result<String, String> {
    // Wait a bit for transaction to be mined
    ic_cdk::println!("⏳ Waiting for transaction to be mined...");
    
    // Poll for transaction receipt
    let mut attempts = 0;
    let max_attempts = 30; // 30 seconds max wait
    
    while attempts < max_attempts {
        let receipt_response = get_transaction_receipt(tx_hash.to_string()).await?;
        let receipt_json: serde_json::Value = serde_json::from_str(&receipt_response)
            .map_err(|e| format!("Failed to parse receipt response: {}", e))?;
        
        if let Some(result) = receipt_json["result"].as_object() {
            if result.get("blockNumber").is_some() {
                // Transaction is mined, extract HTLC ID from logs
                if let Some(logs) = result["logs"].as_array() {
                    for log in logs {
                        if let Some(topics) = log["topics"].as_array() {
                            if topics.len() > 0 {
                                // HTLCCreated event signature: keccak256("HTLCCreated(bytes32,address,address,uint256,bytes32,uint256,address,uint8,uint8,bool)")
                                // The first topic is the event signature, the second topic is the HTLC ID
                                let event_signature = "0x84531b127d0bd83b1d32956f33727af69ab12eef7ff40a6ee1fdd2b64cb104dd"; // HTLCCreated event signature
                                if topics[0].as_str() == Some(event_signature) && topics.len() > 1 {
                                    let htlc_id = topics[1].as_str()
                                        .ok_or("HTLC ID not found in event")?;
                                    return Ok(htlc_id.to_string());
                                }
                            }
                        }
                    }
                }
                return Err("HTLCCreated event not found in transaction receipt".to_string());
            }
        }
        
        // Wait 1 second before next attempt
        ic_cdk::api::time(); // Small delay
        attempts += 1;
    }
    
    Err("Transaction not mined within timeout period".to_string())
}

// Helper function to get the canister's public key
async fn get_canister_public_key(
    key_id: ic_cdk::api::management_canister::ecdsa::EcdsaKeyId,
    canister_id: Option<Principal>,
    derivation_path: Vec<Vec<u8>>,
) -> Vec<u8> {
    let (key,) = ic_cdk::api::management_canister::ecdsa::ecdsa_public_key(
        ic_cdk::api::management_canister::ecdsa::EcdsaPublicKeyArgument {
            canister_id,
            derivation_path,
            key_id,
        },
    )
    .await
    .expect("failed to get public key");
    key.public_key
}

// Helper function to compute the parity bit for signature recovery
fn y_parity(prehash: &[u8], sig: &[u8], pubkey: &[u8]) -> u64 {
    use ethers_core::k256::ecdsa::{RecoveryId, Signature, VerifyingKey};

    let orig_key = VerifyingKey::from_sec1_bytes(pubkey).expect("failed to parse the pubkey");
    let signature = Signature::try_from(sig).unwrap();
    for parity in [0u8, 1] {
        let recid = RecoveryId::try_from(parity).unwrap();
        let recovered_key = VerifyingKey::recover_from_prehash(prehash, &signature, recid)
            .expect("failed to recover key");
        if recovered_key == orig_key {
            return parity as u64;
        }
    }

    panic!(
        "failed to recover the parity bit from a signature; sig: {}, pubkey: {}",
        hex::encode(sig),
        hex::encode(pubkey)
    )
}

// ============================================================================
// ATOMIC SWAP FUNCTIONS
// ============================================================================

/// Generate a random secret for HTLC
fn generate_htlc_secret() -> String {
    use rand::Rng;
    let mut rng = rand::thread_rng();
    let random_bytes: [u8; 16] = rng.gen();
    format!("htlc_secret_{}", hex::encode(random_bytes))
}

/// Create a new atomic swap order
#[update]
#[candid_method]
pub async fn create_atomic_swap_order(
    maker: String,
    taker: String,
    source_token: String,
    destination_token: String,
    source_amount: String,
    destination_amount: String,
    timelock_duration: u64, // Duration in seconds
) -> Result<String, String> {
    // Generate secret and hashlock
    let secret = generate_htlc_secret();
    let secret_bytes = secret.as_bytes();
    let hashlock_bytes = keccak256(secret_bytes);
    let hashlock = format!("0x{}", hex::encode(hashlock_bytes));
    
    // Calculate timestamps
    let current_time = ic_cdk::api::time() / 1_000_000_000; // Convert nanoseconds to seconds
    let timelock = current_time + timelock_duration;
    let expires_at = timelock + 3600; // Add 1 hour buffer
    
    // Create atomic swap order
    let order_id = generate_order_id();
    let atomic_order = AtomicSwapOrder {
        order_id: order_id.clone(),
        maker,
        taker,
        source_token,
        destination_token,
        source_amount,
        destination_amount,
        secret,
        hashlock,
        timelock,
        source_htlc_id: None,
        destination_htlc_id: None,
        status: SwapOrderStatus::Created,
        created_at: current_time,
        expires_at,
    };
    
    // Store the order
    get_atomic_swap_orders().insert(order_id.clone(), atomic_order);
    
    Ok(order_id)
}

/// Create HTLC on EVM chain for atomic swap
#[update]
#[candid_method]
pub async fn create_evm_htlc(
    order_id: String,
    is_source_htlc: bool, // true for source HTLC, false for destination HTLC
) -> Result<String, String> {
    let orders = get_atomic_swap_orders();
    let order = orders.get(&order_id)
        .ok_or("Atomic swap order not found")?;
    
    if order.status != SwapOrderStatus::Created && order.status != SwapOrderStatus::SourceHTLCCreated {
        return Err("Invalid order status for HTLC creation".to_string());
    }
    
    // Determine HTLC parameters based on whether it's source or destination
    let (_sender, recipient, token, amount) = if is_source_htlc {
        (order.maker.clone(), order.taker.clone(), order.source_token.clone(), order.source_amount.clone())
    } else {
        (order.taker.clone(), order.maker.clone(), order.destination_token.clone(), order.destination_amount.clone())
    };
    
    // Determine user address based on HTLC type
    let user_address = if is_source_htlc {
        &order.maker // Source HTLC: transfer from maker
    } else {
        &order.taker // Destination HTLC: transfer from taker
    };
    
    // Encode createHTLCERC20 function call
    let encoded_data = encode_create_htlc_erc20_call(
        &recipient,
        &token,
        &amount,
        &order.hashlock,
        order.timelock,
        1, // sourceChain (Etherlink)
        0, // targetChain (ICP)
        true, // isCrossChain
        &order_id, // orderHash
        user_address, // user address to transfer from
    )?;
    
    // Debug logging
    ic_cdk::println!("🔍 HTLC Creation Debug:");
    ic_cdk::println!("  Recipient: {}", recipient);
    ic_cdk::println!("  Token: {}", token);
    ic_cdk::println!("  Amount: {}", amount);
    ic_cdk::println!("  Hashlock: {}", order.hashlock);
    ic_cdk::println!("  Timelock: {}", order.timelock);
    ic_cdk::println!("  SourceChain: 1");
    ic_cdk::println!("  TargetChain: 0");
    ic_cdk::println!("  IsCrossChain: true");
    ic_cdk::println!("  OrderHash: {}", order_id);
    ic_cdk::println!("  Encoded Data: {}", encoded_data);
    
    // Get canister's Ethereum address
    let canister_address = get_ethereum_address().await?;
    
    // Get fresh nonce for this transaction using thread-safe nonce management
    let nonce = get_next_nonce();
    let nonce_hex = format!("{:x}", nonce);
    
    ic_cdk::println!("Debug - HTLC creation nonce: {}", nonce_hex);
    
    // Get fresh gas price for this transaction
    let gas_price_response = get_gas_price().await?;
    let gas_price_json: serde_json::Value = serde_json::from_str(&gas_price_response)
        .map_err(|e| format!("Failed to parse gas price response: {}", e))?;
    let gas_price = gas_price_json["result"]
        .as_str()
        .ok_or("No result in gas price response")?
        .trim_start_matches("0x");
    let gas_price_u256 = U256::from_str_radix(gas_price, 16).map_err(|e| format!("Invalid gas price: {}", e))?;
    let base_fee_per_gas = gas_price_u256;
    
    // Sign and send transaction with fresh nonce
    let signed_tx = sign_eip1559_transaction(
        &canister_address,
        HTLC_CONTRACT_ADDRESS,
        &nonce_hex,
        &gas_price,
        &base_fee_per_gas.to_string(),
        &encoded_data,
    ).await?;
    
    let tx_hash = send_raw_transaction(&signed_tx).await?;
    
    // Wait for transaction to be mined and get receipt to extract HTLC ID
    let htlc_id = get_htlc_id_from_receipt(&tx_hash).await?;
    
    ic_cdk::println!("🔍 HTLC Creation Result:");
    ic_cdk::println!("  Transaction Hash: {}", tx_hash);
    ic_cdk::println!("  HTLC ID: {}", htlc_id);
    
    // Update order status with HTLC ID (not transaction hash)
    let orders = get_atomic_swap_orders();
    if let Some(order) = orders.get_mut(&order_id) {
        if is_source_htlc {
            order.source_htlc_id = Some(htlc_id.clone());
            order.status = SwapOrderStatus::SourceHTLCCreated;
        } else {
            order.destination_htlc_id = Some(htlc_id.clone());
            order.status = SwapOrderStatus::DestinationHTLCCreated;
        }
    }
    
    Ok(htlc_id)
}

/// Claim HTLC on EVM chain
#[update]
#[candid_method]
pub async fn claim_evm_htlc(
    order_id: String,
    htlc_id: String,
) -> Result<String, String> {
    let orders = get_atomic_swap_orders();
    let order = orders.get(&order_id)
        .ok_or("Atomic swap order not found")?;
    
    // Check if order is ready for claiming
    if order.status != SwapOrderStatus::SourceHTLCCreated && 
       order.status != SwapOrderStatus::DestinationHTLCCreated &&
       order.status != SwapOrderStatus::SourceHTLCClaimed {
        return Err("Order not ready for claiming".to_string());
    }
    
    // Encode claimHTLC function call
    let encoded_data = encode_claim_htlc_call(&htlc_id, &order.secret)?;
    
    // Get canister's Ethereum address
    let canister_address = get_ethereum_address().await?;
    
    // Get fresh nonce for this transaction using thread-safe nonce management
    let nonce = get_next_nonce();
    let nonce_hex = format!("{:x}", nonce);
    
    ic_cdk::println!("Debug - Claim HTLC nonce: {}", nonce_hex);
    
    // Get fresh gas price for this transaction
    let gas_price_response = get_gas_price().await?;
    let gas_price_json: serde_json::Value = serde_json::from_str(&gas_price_response)
        .map_err(|e| format!("Failed to parse gas price response: {}", e))?;
    let gas_price = gas_price_json["result"]
        .as_str()
        .ok_or("No result in gas price response")?
        .trim_start_matches("0x");
    let gas_price_u256 = U256::from_str_radix(gas_price, 16).map_err(|e| format!("Invalid gas price: {}", e))?;
    let base_fee_per_gas = gas_price_u256;
    
    // Sign and send transaction with fresh nonce
    let signed_tx = sign_eip1559_transaction(
        &canister_address,
        HTLC_CONTRACT_ADDRESS,
        &nonce_hex,
        &gas_price,
        &base_fee_per_gas.to_string(),
        &encoded_data,
    ).await?;
    
    let tx_hash = send_raw_transaction(&signed_tx).await?;
    
    // Update order status
    let orders = get_atomic_swap_orders();
    if let Some(order) = orders.get_mut(&order_id) {
        if order.source_htlc_id.as_ref() == Some(&htlc_id) {
            order.status = SwapOrderStatus::SourceHTLCClaimed;
        } else if order.destination_htlc_id.as_ref() == Some(&htlc_id) {
            order.status = SwapOrderStatus::DestinationHTLCClaimed;
        }
        
        // Check if both HTLCs are claimed
        if order.status == SwapOrderStatus::SourceHTLCClaimed || order.status == SwapOrderStatus::DestinationHTLCClaimed {
            // If we just claimed one, allow claiming the other
            // The status will be set to Completed when both are claimed
        }
    }
    
    Ok(tx_hash)
}

/// Execute complete atomic swap (create both HTLCs and claim them)
#[update]
#[candid_method]
pub async fn execute_atomic_swap(order_id: String) -> Result<String, String> {
    // Step 1: Create source HTLC
    let source_htlc_tx = create_evm_htlc(order_id.clone(), true).await?;
    
    // Step 2: Create destination HTLC
    let dest_htlc_tx = create_evm_htlc(order_id.clone(), false).await?;
    
    // Step 3: Wait for both HTLCs to be created (in real implementation, you'd wait for confirmations)
    // For now, we'll proceed immediately
    
    // Step 4: Claim source HTLC (taker claims maker's tokens)
    let source_claim_tx = claim_evm_htlc(order_id.clone(), source_htlc_tx.clone()).await?;
    
    // Step 5: Claim destination HTLC (maker claims taker's tokens)
    let dest_claim_tx = claim_evm_htlc(order_id.clone(), dest_htlc_tx.clone()).await?;
    
    Ok(format!("Atomic swap completed! Source HTLC: {}, Dest HTLC: {}, Source Claim: {}, Dest Claim: {}", 
               source_htlc_tx, dest_htlc_tx, source_claim_tx, dest_claim_tx))
}

/// Get atomic swap order details
#[query]
#[candid_method]
pub fn get_atomic_swap_order(order_id: String) -> Option<AtomicSwapOrder> {
    get_atomic_swap_orders().get(&order_id).cloned()
}

/// Get all atomic swap orders
#[query]
#[candid_method]
pub fn get_all_atomic_swap_orders() -> Vec<AtomicSwapOrder> {
    get_atomic_swap_orders().values().cloned().collect()
}

// ============================================================================
// HELPER FUNCTIONS FOR HTLC CONTRACT INTERACTION
// ============================================================================

/// Encode createHTLCERC20 function call
fn encode_create_htlc_erc20_call(
    recipient: &str,
    token: &str,
    amount: &str,
    hashlock: &str,
    timelock: u64,
    source_chain: u64,
    target_chain: u64,
    is_cross_chain: bool,
    order_hash: &str,
    user_address: &str, // NEW: user address to transfer from
) -> Result<String, String> {
    // Define the function signature
    let function = Function {
        name: "createHTLCERC20".to_string(),
        inputs: vec![
            ethabi::Param { name: "recipient".to_string(), kind: ParamType::Address, internal_type: None },
            ethabi::Param { name: "token".to_string(), kind: ParamType::Address, internal_type: None },
            ethabi::Param { name: "amount".to_string(), kind: ParamType::Uint(256), internal_type: None },
            ethabi::Param { name: "hashlock".to_string(), kind: ParamType::FixedBytes(32), internal_type: None },
            ethabi::Param { name: "timelock".to_string(), kind: ParamType::Uint(256), internal_type: None },
            ethabi::Param { name: "sourceChain".to_string(), kind: ParamType::Uint(8), internal_type: None },
            ethabi::Param { name: "targetChain".to_string(), kind: ParamType::Uint(8), internal_type: None },
            ethabi::Param { name: "isCrossChain".to_string(), kind: ParamType::Bool, internal_type: None },
            ethabi::Param { name: "orderHash".to_string(), kind: ParamType::String, internal_type: None },
            ethabi::Param { name: "owner".to_string(), kind: ParamType::Address, internal_type: None },
        ],
        outputs: vec![],
        constant: None,
        state_mutability: ethabi::StateMutability::NonPayable,
    };
    
    // Parse addresses
    let recipient_addr = Address::from_str(recipient.trim_start_matches("0x"))
        .map_err(|e| format!("Invalid recipient address: {}", e))?;
    let token_addr = Address::from_str(token.trim_start_matches("0x"))
        .map_err(|e| format!("Invalid token address: {}", e))?;
    let user_addr = Address::from_str(user_address.trim_start_matches("0x"))
        .map_err(|e| format!("Invalid user address: {}", e))?;
    
    // Parse amount
    let amount_u256 = EthU256::from_dec_str(amount)
        .map_err(|e| format!("Invalid amount: {}", e))?;
    
    // Parse hashlock (remove 0x prefix and convert to bytes)
    let hashlock_clean = hashlock.trim_start_matches("0x");
    let hashlock_bytes = hex::decode(hashlock_clean)
        .map_err(|e| format!("Invalid hashlock: {}", e))?;
    if hashlock_bytes.len() != 32 {
        return Err("Hashlock must be 32 bytes".to_string());
    }
    
    // Convert parameters to tokens
    let tokens = vec![
        Token::Address(recipient_addr),
        Token::Address(token_addr),
        Token::Uint(amount_u256),
        Token::FixedBytes(hashlock_bytes.clone()),
        Token::Uint(EthU256::from(timelock)),
        Token::Uint(EthU256::from(source_chain)),
        Token::Uint(EthU256::from(target_chain)),
        Token::Bool(is_cross_chain),
        Token::String(order_hash.to_string()),
        Token::Address(user_addr),
    ];
    
    // Encode the function call
    let encoded = function.encode_input(&tokens)
        .map_err(|e| format!("Failed to encode function call: {}", e))?;
    
    let encoded_hex = format!("0x{}", hex::encode(encoded));
    
    // Debug logging
    ic_cdk::println!("🔧 Proper ABI Encoding Debug:");
    ic_cdk::println!("  Function: createHTLCERC20");
    ic_cdk::println!("  Recipient: {}", recipient_addr);
    ic_cdk::println!("  Token: {}", token_addr);
    ic_cdk::println!("  Amount: {} (0x{:x})", amount_u256, amount_u256);
    ic_cdk::println!("  Hashlock: 0x{}", hex::encode(&hashlock_bytes));
    ic_cdk::println!("  Timelock: {}", timelock);
    ic_cdk::println!("  Source Chain: {}", source_chain);
    ic_cdk::println!("  Target Chain: {}", target_chain);
    ic_cdk::println!("  Is Cross Chain: {}", is_cross_chain);
    ic_cdk::println!("  Order Hash: '{}'", order_hash);
    ic_cdk::println!("  Owner: {}", user_addr);
    ic_cdk::println!("  Encoded Data: {}", encoded_hex);
    
    Ok(encoded_hex)
}

/// Encode claimHTLC function call
fn encode_claim_htlc_call(htlc_id: &str, secret: &str) -> Result<String, String> {
    // Define the function signature
    let function = Function {
        name: "claimHTLC".to_string(),
        inputs: vec![
            ethabi::Param { name: "htlcId".to_string(), kind: ParamType::FixedBytes(32), internal_type: None },
            ethabi::Param { name: "secret".to_string(), kind: ParamType::String, internal_type: None },
        ],
        outputs: vec![],
        constant: None,
        state_mutability: ethabi::StateMutability::NonPayable,
    };
    
    // Parse HTLC ID (remove 0x prefix and convert to bytes)
    let htlc_id_clean = htlc_id.trim_start_matches("0x");
    let htlc_id_bytes = hex::decode(htlc_id_clean)
        .map_err(|e| format!("Invalid HTLC ID: {}", e))?;
    if htlc_id_bytes.len() != 32 {
        return Err("HTLC ID must be 32 bytes".to_string());
    }
    
    // Convert parameters to tokens
    let tokens = vec![
        Token::FixedBytes(htlc_id_bytes.clone()),
        Token::String(secret.to_string()),
    ];
    
    // Encode the function call
    let encoded = function.encode_input(&tokens)
        .map_err(|e| format!("Failed to encode function call: {}", e))?;
    
    let encoded_hex = format!("0x{}", hex::encode(encoded));
    
    // Debug logging
    ic_cdk::println!("🔧 Claim HTLC ABI Encoding Debug:");
    ic_cdk::println!("  Function: claimHTLC");
    ic_cdk::println!("  HTLC ID: 0x{}", hex::encode(&htlc_id_bytes));
    ic_cdk::println!("  Secret: '{}'", secret);
    ic_cdk::println!("  Encoded Data: {}", encoded_hex);
    
    Ok(encoded_hex)
}

// ============================================================================
// CANISTER LIFECYCLE
// ============================================================================

#[init]
fn init() {
    // Initialize the HTTP certification tree
    unsafe {
        HTTP_CERTIFICATION_TREE = Some(HttpCertificationTree::default());
    }
}

// Function to initialize nonce from blockchain (call this after deployment)
#[update]
async fn initialize_nonce() -> Result<String, String> {
    let canister_address = get_ethereum_address().await?;
    let nonce_response = get_transaction_count(canister_address.clone()).await?;
    let nonce_json: serde_json::Value = serde_json::from_str(&nonce_response)
        .map_err(|e| format!("Failed to parse nonce response: {}", e))?;
    let current_nonce = nonce_json["result"]
        .as_str()
        .ok_or("No result in nonce response")?
        .trim_start_matches("0x");
    
    let nonce_u64 = u64::from_str_radix(current_nonce, 16)
        .map_err(|e| format!("Invalid nonce: {}", e))?;
    
    update_current_nonce(nonce_u64);
    
    Ok(format!("Nonce initialized to: {}", nonce_u64))
}

#[pre_upgrade]
fn pre_upgrade() {
    // The certification tree will be re-initialized in post_upgrade
}

#[post_upgrade]
fn post_upgrade() {
    // Re-initialize the HTTP certification tree after upgrade
    unsafe {
        HTTP_CERTIFICATION_TREE = Some(HttpCertificationTree::default());
    }
}