use candid::{CandidType, Deserialize};

// ============================================================================
// HTLC AND CROSS-CHAIN SWAP TYPES
// ============================================================================

// HTLC Status
#[derive(CandidType, Deserialize, Clone, Debug, PartialEq)]
pub enum HTLCStatus {
    Created,
    Deposited,
    Claimed,
    Refunded,
    Expired,
}

// Swap Direction
#[derive(CandidType, Deserialize, Clone, Debug)]
pub enum SwapDirection {
    ICPtoEVM,  // ICP -> EVM
    EVMtoICP,  // EVM -> ICP
}

// HTLC Structure (matching EVM contract)
#[derive(CandidType, Deserialize, Clone, Debug)]
pub struct HTLC {
    pub id: String,                 // HTLC ID (bytes32)
    pub sender: String,             // Sender's address
    pub recipient: String,          // Recipient's address
    pub amount: String,             // Amount to swap
    pub hashlock: String,           // Hash of the secret (bytes32)
    pub secret: Option<String>,     // The actual secret (only after reveal)
    pub timelock: u64,              // Expiration timestamp
    pub status: HTLCStatus,         // 0=Locked, 1=Claimed, 2=Refunded
    pub token: String,              // Token address (0x0 for ETH)
    pub source_chain: u64,          // Source chain ID
    pub target_chain: u64,          // Target chain ID
    pub is_cross_chain: bool,       // Whether this is part of a cross-chain swap
    pub order_hash: String,         // Order hash for tracking
    pub created_at: u64,            // Creation timestamp
}

// Atomic Swap Order (for cross-chain coordination)
#[derive(CandidType, Deserialize, Clone, Debug)]
pub struct AtomicSwapOrder {
    pub order_id: String,
    pub maker: String,              // Maker's address
    pub taker: String,              // Taker's address
    pub source_token: String,       // Source token address
    pub destination_token: String,  // Destination token address
    pub source_amount: String,      // Source amount
    pub destination_amount: String, // Destination amount
    pub secret: String,             // Secret for HTLC (generated by ICP)
    pub hashlock: String,           // Hash of the secret
    pub timelock: u64,              // Expiration timestamp
    pub source_htlc_id: Option<String>, // HTLC ID on source chain
    pub destination_htlc_id: Option<String>, // HTLC ID on destination chain
    pub status: SwapOrderStatus,
    pub created_at: u64,
    pub expires_at: u64,
    // New fields for destination addresses
    pub evm_destination_address: Option<String>, // Where EVM tokens should be sent (0x address)
    pub icp_destination_principal: Option<String>, // Where ICP tokens should be sent (principal)
    // Counter order tracking for token forwarding
    pub counter_order_id: Option<String>, // ID of the paired counter order
}

// Swap Order Status
#[derive(CandidType, Deserialize, Clone, Debug, PartialEq)]
pub enum SwapOrderStatus {
    Created,
    SourceHTLCCreated,
    DestinationHTLCCreated,
    SourceHTLCClaimed,
    DestinationHTLCClaimed,
    Completed,
    Expired,
    Cancelled,
    Refunded,
}

// Cross-chain Swap Order (legacy - keeping for reference)
#[derive(CandidType, Deserialize, Clone, Debug)]
pub struct CrossChainSwapOrder {
    pub order_id: String,
    pub maker: String,
    pub taker: String,
    pub source_asset: String,
    pub destination_asset: String,
    pub source_amount: String,
    pub destination_amount: String,
    pub source_chain_id: u64,
    pub destination_chain_id: u64,
    pub hashlock: String,
    pub secret: Option<String>,
    pub status: HTLCStatus,
    pub created_at: u64,
    pub expiration_time: u64,
    pub direction: SwapDirection,
}

// ============================================================================
// EIP-2771 MINIMAL FORWARDER TYPES
// ============================================================================

#[derive(CandidType, Deserialize)]
pub struct PermitRequest {
    pub owner: String,
    pub spender: String,
    pub value: String,
    pub nonce: String, // User's nonce that was used in the permit signature
    pub deadline: String,
    pub v: String,
    pub r: String,
    pub s: String,
    pub signature: String,
}

#[derive(CandidType, Deserialize)]
pub struct GaslessApprovalRequest {
    pub permit_request: PermitRequest,
    pub user_address: String,
    pub amount: String,
    pub token_address: String, // Add token address to make it explicit
}

// ============================================================================
// PERMIT SUBMISSION TYPES (LEGACY - KEEPING FOR REFERENCE)
// ============================================================================

#[derive(CandidType, Deserialize)]
pub struct PermitData {
    pub token_address: String,
    pub owner: String,
    pub spender: String,
    pub value: String,
    pub deadline: u64,
    pub v: u8,
    pub r: String,
    pub s: String,
    pub signature: String,
} 